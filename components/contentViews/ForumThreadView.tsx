
import React from 'react';
import { ForumThreadContent, ForumPost, SearchResultItemData } from '../../types';

const ForumPostCard: React.FC<{ post: ForumPost, isOP?: boolean, effectiveTheme: 'light' | 'dark' }> = ({ post, isOP = false, effectiveTheme }) => {
    
    const cardBgClasses = isOP 
        ? (effectiveTheme === 'dark' ? 'bg-neutral-700/60' : 'bg-gray-100') // Original Post background
        : (effectiveTheme === 'dark' ? 'bg-neutral-700' : 'bg-white');      // Reply background
    
    const textColor = effectiveTheme === 'dark' ? 'text-neutral-300' : 'text-gray-800';
    const usernameColor = effectiveTheme === 'dark' ? 'text-neutral-300' : 'text-neutral-700';
    const timestampColor = effectiveTheme === 'dark' ? 'text-neutral-500' : 'text-gray-500';

    const marginLeftClass = isOP ? 'ml-0' : 'ml-0 md:ml-8';

    return (
        <div className={`p-4 rounded-lg ${cardBgClasses} ${marginLeftClass} shadow`}>
            <div className="flex items-center mb-2">
                <img 
                    src={`https://i.pravatar.cc/40?u=${encodeURIComponent(post.username)}`} 
                    alt={post.username} 
                    className="w-8 h-8 rounded-full mr-3"
                />
                <div>
                    <p className={`font-semibold ${usernameColor}`}>{post.username}</p>
                    {post.timestamp && <p className={`text-xs ${timestampColor}`}>{post.timestamp}</p>}
                </div>
            </div>
            <p className={`${textColor} whitespace-pre-line`}>{post.text}</p>
        </div>
    )
}

interface ForumThreadViewProps {
  content: ForumThreadContent;
  searchItem: SearchResultItemData;
  effectiveTheme: 'light' | 'dark';
}

const ForumThreadView: React.FC<ForumThreadViewProps> = ({ content, searchItem, effectiveTheme }) => {
  const textColor = effectiveTheme === 'dark' ? 'text-neutral-100' : 'text-gray-900';
  const subTextColor = effectiveTheme === 'dark' ? 'text-neutral-400' : 'text-gray-500';
  const siteNameColor = effectiveTheme === 'dark' ? 'text-neutral-200' : 'text-gray-700';
  const borderColor = effectiveTheme === 'dark' ? 'border-neutral-700' : 'border-gray-300';
  const repliesBorderColor = effectiveTheme === 'dark' ? 'border-neutral-600' : 'border-gray-200';
  const titleBorderColor = effectiveTheme === 'dark' ? 'border-neutral-600' : 'border-neutral-400'; // Adjusted for visibility

  return (
    <div className="space-y-6">
        {/* Custom Header for Forum Thread */}
        <header className={`mb-6 pb-4 border-b ${borderColor}`}>
            <div className="flex items-center mb-1">
                <img 
                    src={`https://www.google.com/s2/favicons?domain=${searchItem.domain}&sz=32`} 
                    alt="" 
                    className="w-6 h-6 mr-2 rounded-sm object-contain"
                    onError={(e) => (e.currentTarget.style.display = 'none')}
                />
                <div>
                    <h1 className={`text-xl font-medium ${siteNameColor}`}>{searchItem.name} - Forum</h1>
                    <p className={`text-xs ${subTextColor}`}>{searchItem.domain}</p>
                </div>
            </div>
            {searchItem.originalQuery && (
                <p className={`mt-1 text-xs ${subTextColor}`}>
                    Original search: "{searchItem.originalQuery}"
                </p>
            )}
        </header>

        {/* Forum Thread Content */}
        <h1 className={`text-3xl font-bold ${textColor} pb-2 border-b-2 ${titleBorderColor}`}>{content.threadTitle}</h1>
      
        <div className="space-y-6">
            <ForumPostCard post={content.originalPost} isOP={true} effectiveTheme={effectiveTheme} />

            {content.replies && content.replies.length > 0 && (
            <div className={`pl-0 md:pl-0 space-y-4 ${content.replies.length > 0 ? `border-l-2 ${repliesBorderColor} md:border-l-0` : ''}`}>
                <h2 className={`text-xl font-semibold ${effectiveTheme === 'dark' ? 'text-neutral-200' : 'text-gray-800'} mt-8 mb-3 md:ml-8`}>Replies:</h2>
                {content.replies.map((reply, index) => (
                <ForumPostCard key={index} post={reply} isOP={false} effectiveTheme={effectiveTheme} />
                ))}
            </div>
            )}
        </div>
        <p className={`mt-8 text-xs ${subTextColor} italic text-center`}>
            This fictional forum thread from {content.websiteName} was generated by AI.
        </p>
    </div>
  );
};

export default ForumThreadView;